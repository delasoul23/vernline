/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DeleteRootArgs } from "./DeleteRootArgs";
import { RootFindManyArgs } from "./RootFindManyArgs";
import { RootFindUniqueArgs } from "./RootFindUniqueArgs";
import { Root } from "./Root";
import { RootService } from "../root.service";

@graphql.Resolver(() => Root)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class RootResolverBase {
  constructor(
    protected readonly service: RootService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Root",
    action: "read",
    possession: "any",
  })
  async _rootsMeta(
    @graphql.Args() args: RootFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Root])
  @nestAccessControl.UseRoles({
    resource: "Root",
    action: "read",
    possession: "any",
  })
  async roots(@graphql.Args() args: RootFindManyArgs): Promise<Root[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Root, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Root",
    action: "read",
    possession: "own",
  })
  async root(@graphql.Args() args: RootFindUniqueArgs): Promise<Root | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Root)
  @nestAccessControl.UseRoles({
    resource: "Root",
    action: "delete",
    possession: "any",
  })
  async deleteRoot(@graphql.Args() args: DeleteRootArgs): Promise<Root | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
